#!/bin/sh
# $FreeBSD$

# PROVIDE: recorderd
# REQUIRE: LOGIN cleanvar
# KEYWORD: shutdown

# Configuration settings in /etc/rc.conf:
#
# recorderd_enable (bool):
#   Set to "NO" by default.
#   Set it to "YES" to enable recorderd
#
# recorderd_user (str):
#   Set to "%%RECORDERD_USER%%" by default.
#   User to run process as and for data ownership.
#
# recorderd_group (str):
#   Set to "%%RECORDERD_GROUP%%" by default.
#   Group for data file ownership.
#
# recorderd_config_file (str):
#   Set to "%%PREFIX%%/etc/${name}.conf" by default.
#   The master configuration file.
#
# recorderd_data_dir (str):
#   Set to "%%RECORDERD_DATA%%" by default.
#   The root of the data store.
#
# recorderd_run_dir (str):
#   Set to "%%RECORDERD_RUN%%" by default.
#   The root for the pid and socket files.
#
# recorderdlimits_enable (bool):
#   Set to "NO" by default.
#   Set it to yes to run `limits ${recorderdlimits_args}` just before
#   recorderd starts.
#
# recorderdlimits_args (str):
#   Default to "-e -U %%RECORDERD_USER%%"
#   Arguments of pre-start limits run.

. /etc/rc.subr

name="recorderd"
rcvar=recorderd_enable

load_rc_config ${name}

: ${recorderd_enable:="NO"}
: ${recorderd_user:="%%RECORDERD_USER%%"}
: ${recorderd_group:="%%RECORDERD_GROUP%%"}
: ${recorderd_config_file:="%%PREFIX%%/etc/${name}.conf"}
: ${recorderd_data_dir:="%%RECORDERD_DATA%%"}
: ${recorderd_run_dir:="%%RECORDERD_RUN%%"}
: ${recorderdlimits_enable:="NO"}
: ${recorderdlimits_args:="-e -U ${recorderd_user}"}

start_precmd="${name}_precmd"
restart_precmd="${name}_checkconfig"
stop_postcmd="${name}_poststop"
keygen_cmd="${name}_initialise"
keygen_precmd="${name}_checkconfig"

#extra_commands='initialise reload configtest'
extra_commands='keygen'

pidfile="${recorderd_run_dir}/${name}.pid"

# recorderd creates it own PID file so need to remove  if stale
lock_file="${recorderd_data_dir}/${name}.pid"

# to record any outputs such as the stack trace on crash
stdout_file="${recorderd_data_dir}/${name}.stdout"
stderr_file="${recorderd_data_dir}/${name}.stderr"

required_files="${recorderd_config_file}"

_recorderd_program="%%PREFIX%%/sbin/recorderd"
_recorderd_arguments="--quiet --config-file=${recorderd_config_file}"

command="/usr/sbin/daemon"
#command_args="-f -P ${pidfile} -r -- ${_recorderd_program} ${_recorderd_arguments}"
command_args="-P ${pidfile} -r -- ${_recorderd_program} ${_recorderd_arguments} 1>> ${stdout_file} 2>> ${stderr_file}"
#procname=${_recorderd_program} # do not override procname as program runs under daemon


recorderd_checkdirs()
{
  local dir
  for dir in "${recorderd_data_dir}" "${recorderd_run_dir}"
  do
    [ -d "${dir}" ] || install -d -o "${recorderd_user}" -g "${recorderd_group}" -m 770 "${dir}"
  done
  cd "${recorderd_data_dir}"
}

recorderd_checkconfig()
{
  recorderd_checkdirs

  #echo "Performing sanity check on recorderd configuration:"
  #eval ${command} ${recorderd_flags} -t
}

recorderd_precmd()
{
  recorderd_checkconfig

  if [ -e "${lock_file}" ]
  then
    pid=$(check_pidfile "${lock_file}" "${_recorderd_program}")
    if [ -n "${pid}" ]
    then
      echo "another recorderd is ruunning on pid: ${pid}"
    else
      rm -f "${lock_file}"
    fi
  fi

  if checkyesno recorderdlimits_enable
  then
    eval $(/usr/bin/limits ${recorderdlimits_args}) 2>/dev/null
  else
    return 0
  fi
}

recorderd_poststop()
{
    rm -f "${pidfile}"
    rm -f "${lock_file}"
}

recorderd_keygen()
{
  for c in generate-identity
  do
    su -m "${recorderd_user}" -c "${_recorderd_program} ${_recorderd_arguments} ${c}"
  done
}

run_rc_command "$1"
