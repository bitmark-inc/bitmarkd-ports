#!/bin/sh
# $FreeBSD$

# PROVIDE: prooferd
# REQUIRE: LOGIN cleanvar
# KEYWORD: shutdown

# Configuration settings in /etc/rc.conf:
#
# prooferd_enable (bool):
#   Set to "NO" by default.
#   Set it to "YES" to enable prooferd
#
# prooferd_user (str):
#   Set to "%%PROOFERD_USER%%" by default.
#   User to run process as and for data ownership.
#
# prooferd_group (str):
#   Set to "%%PROOFERD_GROUP%%" by default.
#   Group for data file ownership.
#
# prooferd_config_file (str):
#   Set to "%%PREFIX%%/etc/${name}.conf" by default.
#   The master configuration file.
#
# prooferd_data_dir (str):
#   Set to "%%PROOFERD_DATA%%" by default.
#   The root of the data store.
#
# prooferd_run_dir (str):
#   Set to "%%PROOFERD_RUN%%" by default.
#   The root for the pid and socket files.
#
# prooferdlimits_enable (bool):
#   Set to "NO" by default.
#   Set it to yes to run `limits ${prooferdlimits_args}` just before
#   prooferd starts.
#
# prooferdlimits_args (str):
#   Default to "-e -U %%PROOFERD_USER%%"
#   Arguments of pre-start limits run.

. /etc/rc.subr

name="prooferd"
rcvar=prooferd_enable

load_rc_config ${name}

: ${prooferd_enable:="NO"}
: ${prooferd_user:="%%PROOFERD_USER%%"}
: ${prooferd_group:="%%PROOFERD_GROUP%%"}
: ${prooferd_config_file:="%%PREFIX%%/etc/${name}.conf"}
: ${prooferd_data_dir:="%%PROOFERD_DATA%%"}
: ${prooferd_run_dir:="%%PROOFERD_RUN%%"}
: ${prooferdlimits_enable:="NO"}
: ${prooferdlimits_args:="-e -U ${prooferd_user}"}

start_precmd="${name}_precmd"
restart_precmd="${name}_checkconfig"
stop_postcmd="${name}_poststop"
keygen_cmd="${name}_initialise"
keygen_precmd="${name}_checkconfig"

#extra_commands='initialise reload configtest'
extra_commands='keygen'

pidfile="${prooferd_run_dir}/${name}.pid"

# prooferd creates it own PID file so need to remove  if stale
lock_file="${prooferd_data_dir}/${name}.pid"

# to record any outputs such as the stack trace on crash
stdout_file="${prooferd_data_dir}/${name}.stdout"
stderr_file="${prooferd_data_dir}/${name}.stderr"

required_files="${prooferd_config_file}"

_prooferd_program="%%PREFIX%%/sbin/prooferd"
_prooferd_arguments="--quiet --config-file=${prooferd_config_file}"

command="/usr/sbin/daemon"
#command_args="-f -P ${pidfile} -r -- ${_prooferd_program} ${_prooferd_arguments}"
command_args="-P ${pidfile} -r -- ${_prooferd_program} ${_prooferd_arguments} 1>> ${stdout_file} 2>> ${stderr_file}"
#procname=${_prooferd_program} # do not override procname as program runs under daemon


prooferd_checkdirs()
{
  local dir
  for dir in "${prooferd_data_dir}" "${prooferd_run_dir}"
  do
    [ -d "${dir}" ] || install -d -o "${prooferd_user}" -g "${prooferd_group}" -m 770 "${dir}"
  done
  cd "${prooferd_data_dir}"
}

prooferd_checkconfig()
{
  prooferd_checkdirs

  #echo "Performing sanity check on prooferd configuration:"
  #eval ${command} ${prooferd_flags} -t
}

prooferd_precmd()
{
  prooferd_checkconfig

  if [ -e "${lock_file}" ]
  then
    pid=$(check_pidfile "${lock_file}" "${_prooferd_program}")
    if [ -n "${pid}" ]
    then
      echo "another prooferd is ruunning on pid: ${pid}"
    else
      rm -f "${lock_file}"
    fi
  fi

  if checkyesno prooferdlimits_enable
  then
    eval $(/usr/bin/limits ${prooferdlimits_args}) 2>/dev/null
  else
    return 0
  fi
}

prooferd_poststop()
{
    rm -f "${pidfile}"
    rm -f "${lock_file}"
}

prooferd_keygen()
{
  for c in generate-identity
  do
    su -m "${prooferd_user}" -c "${_prooferd_program} ${_prooferd_arguments} ${c}"
  done
}

run_rc_command "$1"
